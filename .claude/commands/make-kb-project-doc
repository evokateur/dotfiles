# Claude Code Prompt: Generate Resume Knowledge Base Documentation

Analyze the codebase in this directory and create a comprehensive project documentation file optimized for resume/CV matching against job postings. The output should be structured markdown that will be embedded in a vector database for semantic search.

The document should be named after the project directory, e.g., `project-name.md`.

Before completing the analysis, be sure to stop and prompt the user (me) about the project, its challenges, and interesting aspects of the code.

Also be sure to ask me what my role was in the development of the project. This is very important information for the knowledge base.

There should be no references to the source code, which is no longer available. The source code you are reading is making a temporary appearence in order to complete this documentation.

## Required Analysis & Output Structure

### Project Header

- **Project Name**: [Descriptive name based on functionality]
- **Role**: [prompt user for their role in the project]

### Executive Summary (2-3 sentences)

Write a concise overview focusing on business impact and technical scope. What problem did this solve and at what scale?

### Technical Architecture

Analyze the codebase structure and describe:

- **System Architecture**: Overall design patterns, architectural style (microservices, monolithic, event-driven, etc.)
- **Key Components**: Major modules, services, or subsystems
- **Data Flow**: How information moves through the system
- **Integration Points**: APIs, databases, external services, message queues

### Technologies & Tools

Create a comprehensive inventory:

- **Languages**: All programming languages used
- **Frameworks & Libraries**: Web frameworks, ML libraries, utility libraries
- **Databases**: SQL/NoSQL databases, caching solutions
- **Infrastructure**: Cloud services, containerization, orchestration
- **DevOps & Tools**: CI/CD, monitoring, testing frameworks
- **APIs & Protocols**: REST, GraphQL, gRPC, message formats

### Core Functionality

Describe the main features and capabilities:

- **Primary Features**: What the system does
- **Business Logic**: Key algorithms, workflows, or processes
- **Performance Characteristics**: Scale, throughput, response times (estimate based on code)
- **Security Features**: Authentication, authorization, data protection

### Technical Challenges & Solutions

Identify and explain:

- **Scalability Solutions**: How the system handles growth
- **Performance Optimizations**: Caching, indexing, async processing
- **Complex Algorithms**: Any sophisticated logic or data processing
- **Integration Challenges**: How different systems were connected

### Code Quality & Practices

Assess:

- **Testing Strategy**: Unit tests, integration tests, coverage
- **Code Organization**: Structure, modularity, design patterns
- **Documentation**: Inline comments, README files, API docs
- **Error Handling**: Robustness and reliability measures

### Quantifiable Impact

Based on code analysis, estimate:

- **Scale Metrics**: Users served, data processed, transaction volume
- **Performance Metrics**: Response times, throughput, availability
- **Efficiency Gains**: Automation, process improvements
- **Technical Debt Reduction**: Refactoring, modernization efforts

### Skills Demonstrated

List specific technical and soft skills evidenced by the codebase:

- **Technical Skills**: Specific technologies, methodologies, best practices
- **Leadership Skills**: Code review patterns, mentoring evidence, architectural decisions
- **Problem-Solving**: Creative solutions, optimization techniques
- **Collaboration**: Integration patterns, API design, documentation quality

### Keywords for ATS Optimization

Extract all relevant technical terms, methodologies, and industry buzzwords that would help match against job postings.

## Analysis Guidelines

1. **Be Specific**: Don't say "uses a database" - specify PostgreSQL, Redis, etc.
2. **Quantify When Possible**: Look for loops, data structures, or patterns that suggest scale
3. **Infer Business Context**: What industry/domain does this serve based on the functionality?
4. **Assume Senior Role**: Given 15 years at one company, emphasize leadership and architectural decisions
5. **Focus on Complexity**: Highlight sophisticated technical challenges and solutions
6. **Modern Relevance**: Note any technologies/patterns that are currently in demand

## Output Format

Structure as markdown with clear sections. Use bullet points sparingly - prefer descriptive paragraphs that will embed well for semantic search. Include specific technology names and versions where evident.

Make the content rich enough that a resume optimization system can match it against diverse job requirements while highlighting your technical depth and business impact.
